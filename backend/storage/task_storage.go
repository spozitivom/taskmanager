package storage

import (
	"github.com/spozitivom/taskmanager/models"
	"gorm.io/gorm"
)

// TaskStorage –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ä–∞–±–æ—Ç—É —Å –∑–∞–¥–∞—á–∞–º–∏ –≤ –ë–î (CRUD)
type TaskStorage struct {
	db *gorm.DB
}

// NewTaskStorage —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∑–∞–¥–∞—á
func NewTaskStorage(db *gorm.DB) *TaskStorage {
	return &TaskStorage{db: db}
}

// GetAllSorted –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ created_at
func (s *TaskStorage) GetAllSorted(sortOrder string) ([]models.Task, error) {
	if sortOrder != "asc" && sortOrder != "desc" {
		sortOrder = "desc"
	}
	var tasks []models.Task
	err := s.db.Order("created_at " + sortOrder).Find(&tasks).Error
	return tasks, err
}

// üîç GetFiltered ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º + —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
func (s *TaskStorage) GetFiltered(sortOrder, status, priority, stage string) ([]models.Task, error) {
	if sortOrder != "asc" && sortOrder != "desc" {
		sortOrder = "desc"
	}

	query := s.db.Model(&models.Task{})

	if status != "" {
		query = query.Where("status = ?", status)
	}
	if priority != "" {
		query = query.Where("priority = ?", priority)
	}
	if stage != "" {
		query = query.Where("stage = ?", stage)
	}

	var tasks []models.Task
	err := query.Order("created_at " + sortOrder).Find(&tasks).Error
	return tasks, err
}

// GetByID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
func (s *TaskStorage) GetByID(id uint) (*models.Task, error) {
	var task models.Task
	err := s.db.First(&task, id).Error
	if err != nil {
		return nil, err
	}
	return &task, nil
}

// Create —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ë–î
func (s *TaskStorage) Create(task *models.Task) error {
	return s.db.Create(task).Error
}

// Update —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
func (s *TaskStorage) Update(task *models.Task) error {
	return s.db.Save(task).Error
}

// Delete —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
func (s *TaskStorage) Delete(id uint) error {
	return s.db.Delete(&models.Task{}, id).Error
}
