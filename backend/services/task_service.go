package services

import (
	"github.com/spozitivom/taskmanager/models"
	"github.com/spozitivom/taskmanager/storage"
)

// TaskService —Ä–µ–∞–ª–∏–∑—É–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–¥–∞—á.
type TaskService struct {
	storage *storage.TaskStorage
}

// NewTaskService —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä TaskService
func NewTaskService(storage *storage.TaskStorage) *TaskService {
	return &TaskService{storage: storage}
}

// GetTasks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è.
func (s *TaskService) GetTasks(sortOrder string) ([]models.Task, error) {
	return s.storage.GetAllSorted(sortOrder)
}

// üîç GetFilteredTasks ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
func (s *TaskService) GetFilteredTasks(sortOrder, status, priority, stage string) ([]models.Task, error) {
	return s.storage.GetFiltered(sortOrder, status, priority, stage)
}

// GetTaskByID –∏—â–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–æ –µ—ë ID.
func (s *TaskService) GetTaskByID(id uint) (*models.Task, error) {
	return s.storage.GetByID(id)
}

// CreateTask —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
func (s *TaskService) CreateTask(task *models.Task) error {
	return s.storage.Create(task)
}

// UpdateTask –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É –ø–æ ID.
func (s *TaskService) UpdateTask(id uint, input *models.Task) (*models.Task, error) {
	task, err := s.storage.GetByID(id)
	if err != nil {
		return nil, err
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–æ–ª—è (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –≤—Ä—É—á–Ω—É—é)
	if input.Title != "" {
		task.Title = input.Title
	}
	task.Checked = input.Checked // –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø–æ–ª–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
	if input.Description != "" {
		task.Description = input.Description
	}
	if input.Status != "" {
		task.Status = input.Status
	}
	if input.Priority != "" {
		task.Priority = input.Priority
	}
	if input.Stage != "" {
		task.Stage = input.Stage
	}

	if err := s.storage.Update(task); err != nil {
		return nil, err
	}

	return task, nil
}

// DeleteTask —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID.
func (s *TaskService) DeleteTask(id uint) error {
	return s.storage.Delete(id)
}
