package handlers

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/spozitivom/taskmanager/models"
	"github.com/spozitivom/taskmanager/services"
	"gorm.io/gorm"
)

// AuthHandler ‚Äî –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ GORM, —á—Ç–æ–±—ã —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏–º–µ–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ë–î
type AuthHandler struct {
	DB *gorm.DB
}

// Register ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AuthHandler) Register(c *gin.Context) {
	var user models.User

	// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º JSON –∫ –º–æ–¥–µ–ª–∏ User
	if err := c.ShouldBindJSON(&user); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
	hash, err := services.HashPassword(user.Password)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to hash password"})
		return
	}

	user.Password = hash // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –∫–∞–∫ string

	// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
	if err := h.DB.Create(&user).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to create user"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "user registered"})
}

// Login ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h *AuthHandler) Login(c *gin.Context) {
	var req struct {
		Email    string `json:"email"`
		Password string `json:"password"`
	}

	// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º JSON –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∑–∞–ø—Ä–æ—Å–∞
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	var user models.User

	// –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
	if err := h.DB.Where("email = ?", req.Email).First(&user).Error; err != nil {
		fmt.Println("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:", req.Email)
		c.JSON(http.StatusUnauthorized, gin.H{"error": "invalid credentials"})
		return
	}

	// –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
	fmt.Println("üîê –ü–∞—Ä–æ–ª—å –∏–∑ –∑–∞–ø—Ä–æ—Å–∞:", req.Password)
	fmt.Println("üîê –•–µ—à –∏–∑ –±–∞–∑—ã:", user.Password)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
	if err := services.CheckPassword(user.Password, req.Password); err != nil {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π:", err.Error())
		c.JSON(http.StatusUnauthorized, gin.H{"error": "invalid credentials"})
		return
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É
	token, err := services.GenerateJWT(user.ID, user.Role)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to generate token"})
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
	c.JSON(http.StatusOK, gin.H{
		"token":  token,
		"userID": user.ID,
		"role":   user.Role,
	})
}
