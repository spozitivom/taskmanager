import { useState, useEffect } from 'react'
import './App.css'

function App() {
  // üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–¥–∞—á
  const [tasks, setTasks] = useState([])

  // üÜï –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (input)
  const [newTask, setNewTask] = useState('')

  // ‚úèÔ∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
  const [editId, setEditId] = useState(null)
  const [editTitle, setEditTitle] = useState('')

  // üåç URL –±—ç–∫–µ–Ω–¥–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
  const apiUrl = import.meta.env.VITE_API_URL || 'http://localhost:8081'

  // üîΩ –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: 'desc' (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞) –∏–ª–∏ 'asc' (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
  const [sortOrder, setSortOrder] = useState('desc');

  // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ / –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
  const handleToggleTask = async (id, newChecked) => {
    try {
      const response = await fetch(`${apiUrl}/tasks/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ checked: newChecked }),
      });
      if (!response.ok) throw new Error('Failed to update task');
      const updated = await response.json();
      setTasks(prev => prev.map(t => (t.id === id ? updated : t)));
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
    }
  };

  // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
  const handleEditSave = async (id) => {
    try {
      const response = await fetch(`${apiUrl}/tasks/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ title: editTitle }),
      });
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
      const updated = await response.json();
      setTasks(prev => prev.map(t => t.id === id ? updated : t));
      setEditId(null);
      setEditTitle('');
    } catch (err) {
      console.error(err);
    }
  };

  // üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏ —Å–º–µ–Ω–µ sortOrder)
  useEffect(() => {
    fetch(`${apiUrl}/tasks?sort=${sortOrder}`)
      .then(res => res.json())
      .then(setTasks)
      .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", err));
  }, [sortOrder]);

  // ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const handleAddTask = () => {
    if (!newTask.trim()) return;
    fetch(`${apiUrl}/tasks`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title: newTask })
    })
      .then(res => res.json())
      .then(task => {
        setTasks(prev => [task, ...prev])
        setNewTask('')
      })
      .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:", err))
  }

  // ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const handleDelete = (id) => {
    fetch(`${apiUrl}/tasks/${id}`, {
      method: 'DELETE'
    })
      .then(() => {
        setTasks(prev => prev.filter(task => task.id !== id))
      })
      .catch(err => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", err))
  }

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-2xl font-bold mb-4 text-blue-600 text-center">–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</h1>

      {/* üîπ –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ */}
      <div className="flex mb-6 gap-2">
        <input
          type="text"
          className="flex-1 p-2 border rounded"
          placeholder="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
        />
        <button
          onClick={handleAddTask}
          className="bg-blue-600 text-white px-4 rounded hover:bg-blue-700"
        >
          –î–æ–±–∞–≤–∏—Ç—å
        </button>
      </div>

      {/* üîΩ –°–µ–ª–µ–∫—Ç–æ—Ä —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∑–∞–¥–∞—á */}
      <div className="mb-4 text-right">
        <label className="mr-2">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
        <select
          value={sortOrder}
          onChange={e => setSortOrder(e.target.value)}
          className="border p-1 rounded"
        >
          <option value="desc">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
          <option value="asc">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</option>
        </select>
      </div>

      {/* üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
      <ul className="space-y-2">
        {tasks.map(task => (
          <li key={task.id} className="p-2 border rounded shadow flex justify-between items-center">
            <span className="flex flex-col w-full">
              <span className="flex items-center">
                <input
                  type="checkbox"
                  checked={task.checked}
                  onChange={() => handleToggleTask(task.id, !task.checked)}
                  className="mr-2"
                />

                {editId === task.id ? (
                  <>
                    <input
                      type="text"
                      value={editTitle}
                      onChange={e => setEditTitle(e.target.value)}
                      className="flex-1 border p-1 mr-2"
                    />
                    <button
                      onClick={() => handleEditSave(task.id)}
                      className="text-green-600 hover:text-green-800 mr-2"
                    >
                      üíæ
                    </button>
                  </>
                ) : (
                  <>
                    <span className="flex-1">{task.title}</span>
                    <button
                      onClick={() => {
                        setEditId(task.id)
                        setEditTitle(task.title)
                      }}
                      className="text-yellow-600 hover:text-yellow-800 mr-2"
                    >
                      ‚úèÔ∏è
                    </button>
                  </>
                )}
              </span>
              {/* üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
              <span className="text-sm text-gray-500 ml-6">
                {new Date(task.created_at).toLocaleString()}
              </span>
            </span>

            {/* üóë –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è */}
            <button
              onClick={() => handleDelete(task.id)}
              className="text-red-600 hover:text-red-800 ml-2"
            >
              üóë
            </button>
          </li>
        ))}
      </ul>
    </div>
  )
}

export default App
